@model Vidly.Models.Customer
@{
	ViewBag.Title = "New";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>New Customer</h2>
@*The Html BeginForm helper method only creates the opening <form> tag. How do we create the closing tag?
	Well, this method returns a disposable object, so we need to wrap it in a using statement -LESSON 38
	In the disposing method, it will render the closing </form> tag*@
@using (Html.BeginForm("Create", "Customers"))
{
	<div class="form-group">
		@Html.LabelFor(c => c.Name) @*This is how we map to our domain properties*@
		@Html.TextBoxFor(c => c.Name, new { @class = "form-control" })
	</div>
	<div class="form-group">
		@*With the "Html.LabelFor" we get the textbox focus even by just clicking on the label. This is because the method include "for='Birthdate'" which is the field Id as well (inspect it!)*@
		@*We can also achieve this with a normal label markup, but we must manually include the for ONLY IF WE WANT THE FOCUS BEHAVIOR WHEN CLICKINGON THE LABEL... LESSON 39*@
		<label for="Birthdate">Date of Birth</label>
		@Html.TextBoxFor(c => c.Birthdate, new { @class = "form-control" })
	</div>
	<div class="checkbox">
		<label>
			@Html.CheckBoxFor(c => c.IsSubscribedToNewsLetter) Subscribed to Newsletter?
		</label>
	</div>
}

@*So with labels, it's a tradeoff. If you want to use data annotations in your classes, it will automatically
	be updated in your forms if/when you change them in your classes/models, but you will have to recompile your code.
	
	On the other hand, if you want to use the <label for="id"></label> markup method, you do not need to recompile your code,
	but if/when you change the labels in your models/classes, you will also have to manually change the label value in the label tags.
	*@
