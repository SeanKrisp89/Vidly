@model Vidly.ViewModels.CustomerFormViewModel
@*We changed from model.customer to ViewModel.NewCustomerViewModel in order to pass in MembershipTypes and Customer types. The NewCustomerViewModel contains a Customer type...
	When we updated, we got errors on all our properties. This is because the model used to only be customer, therefore we had direct access to the properties.
	So we had things like c => c.Name, but now Customer type is the PROPERTY, so we have to get the PROPERTIES OF the properties like so: c => c.Customer.Name*@
@{
	ViewBag.Title = "New";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>New Customer</h2>
@*The Html BeginForm helper method only creates the opening <form> tag. How do we create the closing tag?
	Well, this method returns a disposable object, so we need to wrap it in a using statement -LESSON 38
	In the disposing method, it will render the closing </form> tag*@
@using (Html.BeginForm("Save", "Customers"))
{
	<div class="form-group">
		@Html.LabelFor(c => c.Customer.Name)
		@Html.TextBoxFor(c => c.Customer.Name, new { @class = "form-control" })
	</div>
	<div class="form-group">
		@*With the "Html.LabelFor" we get the textbox focus even by just clicking on the label. This is because the method include "for='Birthdate'" which is the field Id as well (inspect it!)*@
		@*We can also achieve this with a normal label markup, but we must manually include the for ONLY IF WE WANT THE FOCUS BEHAVIOR WHEN CLICKINGON THE LABEL... LESSON 39*@
		<label for="Birthdate">Date of Birth</label>
		@Html.TextBoxFor(c => c.Customer.Birthdate, "{0:d MMM yyyy}", new { @class = "form-control" })
	</div>
	<div class="form-group">
		@Html.LabelFor(c => c.Customer.MembershipTypeId)
		@Html.DropDownListFor(c => c.Customer.MembershipTypeId, new SelectList(Model.MembershipTypes, "Id", "Name"), "Select Membership Type", new { @class = "form-control" })
	</div>
	<div class="checkbox">
		<label>
			@Html.CheckBoxFor(c => c.Customer.IsSubscribedToNewsLetter) Subscribed to Newsletter?
		</label>
	</div>
	@Html.HiddenFor(c => c.Customer.Id)
	<button type="submit" class="btn btn-primary">Save</button>
}

@*So with labels, it's a tradeoff. If you want to use data annotations in your classes, it will automatically
	be updated in your forms if/when you change them in your classes/models, but you will have to recompile your code.

	On the other hand, if you want to use the <label for="id"></label> markup method, you do not need to recompile your code,
	but if/when you change the labels in your models/classes, you will also have to manually change the label value in the label tags.
*@
